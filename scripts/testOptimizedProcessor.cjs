const OptimizedProcessor = require('../src/services/optimizedFirebaseProcessor.js');
const FCMDeviceService = require('../src/services/fcmDeviceService.cjs');
require('dotenv').config();

async function testOptimizedProcessor() {
  console.log('üß™ Testando processador otimizado Firebase...\n');

  try {
    // 1. Verificar estat√≠sticas atuais
    console.log('üìä Verificando estat√≠sticas atuais...');
    const stats = await FCMDeviceService.getStats();
    
    if (!stats) {
      console.log('‚ùå N√£o foi poss√≠vel obter estat√≠sticas. Verifique se a migration foi aplicada.');
      return;
    }

    console.log('üìà Estat√≠sticas:');
    console.log(`   Dispositivos ativos: ${stats.active_devices}`);
    console.log(`   Com FCM token: ${stats.devices_with_fcm}`);
    console.log(`   Notifica√ß√µes pendentes: ${stats.total_pending}`);
    console.log(`   Notifica√ß√µes entregues: ${stats.total_delivered}\n`);

    // 2. Listar dispositivos com FCM
    if (stats.devices_with_fcm > 0) {
      console.log('üì± Dispositivos com FCM token:');
      const devices = await FCMDeviceService.getActiveDevicesWithFCM();
      devices.forEach((device, i) => {
        console.log(`   ${i + 1}. ${device.device_token}`);
        console.log(`      FCM: ${device.fcm_token.substring(0, 30)}...`);
        console.log(`      Mobile: ${device.is_mobile ? 'üì±' : 'üñ•Ô∏è'} iOS: ${device.is_ios ? 'üçé' : 'ü§ñ'}`);
        console.log(`      Atualizado: ${new Date(device.fcm_token_updated_at).toLocaleString()}\n`);
      });
    }

    // 3. Verificar notifica√ß√µes pendentes
    console.log('üì¨ Buscando notifica√ß√µes pendentes com FCM...');
    const pending = await FCMDeviceService.getPendingNotificationsWithFCM();
    
    if (pending.length === 0) {
      console.log('‚úÖ Nenhuma notifica√ß√£o pendente com FCM token dispon√≠vel');
      console.log('\nüí° Para testar, voc√™ pode:');
      console.log('1. Adicionar uma notifica√ß√£o pendente manualmente');
      console.log('2. Garantir que pelo menos um dispositivo tenha FCM token');
      return;
    }

    console.log(`üìã Encontradas ${pending.length} notifica√ß√µes prontas para envio:`);
    pending.slice(0, 3).forEach((notif, i) => {
      console.log(`   ${i + 1}. ID: ${notif.notification_id}`);
      console.log(`      Dispositivo: ${notif.device_token}`);
      console.log(`      T√≠tulo: ${notif.title}`);
      console.log(`      FCM: ${notif.fcm_token ? notif.fcm_token.substring(0, 20) + '...' : 'N/A'}`);
    });

    // 4. Executar processamento
    console.log('\nüöÄ Executando processamento otimizado...');
    const result = await OptimizedProcessor.processPendingNotifications();

    console.log('\nüìä Resultado do processamento:');
    console.log(`   ‚úÖ Processadas: ${result.processed}`);
    console.log(`   üì§ Enviadas: ${result.sent}`);
    console.log(`   ‚ùå Falharam: ${result.failed}`);
    console.log(`   ‚è≠Ô∏è Ignoradas: ${result.skipped}`);

    // 5. Verificar estat√≠sticas ap√≥s processamento
    console.log('\nüìà Estat√≠sticas ap√≥s processamento:');
    const newStats = await FCMDeviceService.getStats();
    console.log(`   Notifica√ß√µes pendentes: ${newStats.total_pending} (antes: ${stats.total_pending})`);
    console.log(`   Notifica√ß√µes entregues: ${newStats.total_delivered} (antes: ${stats.total_delivered})`);

    // 6. Executar manuten√ß√£o
    console.log('\nüßπ Executando manuten√ß√£o do sistema...');
    const maintenance = await OptimizedProcessor.runMaintenance();
    console.log(`   Dispositivos ativos: ${maintenance.activeDevices}`);
    console.log(`   Tokens antigos: ${maintenance.oldTokens}`);

    console.log('\n‚úÖ Teste do processador otimizado conclu√≠do com sucesso!');

  } catch (error) {
    console.error('\n‚ùå Erro durante teste:', error.message);
    console.log('\nüîç Poss√≠veis causas:');
    console.log('1. Migration n√£o foi aplicada corretamente');
    console.log('2. Problemas de configura√ß√£o Firebase');
    console.log('3. Vari√°veis de ambiente incorretas');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testOptimizedProcessor();
}

module.exports = { testOptimizedProcessor };